<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Vòng tay với vị trí cố định</title>
    <link href="~/css/sortable.css" rel="stylesheet" />
    <link href="~/css/swal.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="preconnect" href="https://ouroboroselio.blob.core.windows.net">
    <link rel="dns-prefetch" href="https://ouroboroselio.blob.core.windows.net">
    <style>
        /* Lazy loading placeholder */
        .charm-placeholder {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: loading 1.5s infinite;
            min-height: 80px;
            border-radius: 8px;
        }

        @@keyframes loading {
            0%

        {
            background-position: 200% 0;
        }

        100% {
            background-position: -200% 0;
        }

        }

        .charm-item img {
            transition: opacity 0.3s ease;
            opacity: 0;
        }

            .charm-item img.loaded {
                opacity: 1;
            }

        /* Virtual scrolling container */
        .charm-container {
            height: 400px;
            overflow-y: auto;
            position: relative;
        }

        .charm-virtual-list {
            position: relative;
        }

        .charm-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            gap: 10px;
            padding: 10px;
        }

        /* Optimized image loading */
        .charm-item img {
            width: 100%;
            height: 80px;
            object-fit: cover;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div class="container1">
        <div>
            <div class="charm-list">
                <h3>✨ Danh sách Charm</h3>

                <!-- Virtual scrolling container -->
                <div class="charm-container" id="charmContainer">
                    <div class="charm-virtual-list" id="charmVirtualList">
                        <div class="charm-grid" id="availableCharms"></div>
                    </div>
                </div>
            </div>
            <div class="note-section">
                <h3>📝 Ghi chú</h3>
                <textarea id="noteInput" placeholder="Nhập ghi chú cho vòng tay của bạn..."></textarea>
                <p id="wordCount">Số từ: 0 / 200</p>
            </div>
        </div>
        <div class="ring">
            <h3>💍 Vòng tay (Tối thiểu 1 charm)</h3>
            <div id="bracelet"></div>
            <button id="submitBtn">Tạo vòng tay (kèm ghi chú)</button>
            <div id="totalPriceDisplay" style="margin-top: 15px; font-weight: bold;">
                Tổng giá vòng tay: 15.000đ
            </div>
            <div id="noteForUser" style="margin-top: 15px;">
                Lưu ý: Sản phẩm vòng tay bạn đã thiết kế đang tồn tại trong giỏ hàng sẽ bị xóa nếu bạn thiết kế 1 vòng tay khác thay thế!!!
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script>
        // Performance optimization variables
        let allCharms = [];
        let filteredCharms = [];
        let visibleCharms = [];
        let currentPage = 0;
        const itemsPerPage = 20; // Load 20 items at a time
        let isLoading = false;

        // Image cache for better performance
        const imageCache = new Map();

        const noteInput = document.getElementById("noteInput");
        const wordCount = document.getElementById("wordCount");
        const charmContainer = document.getElementById("charmContainer");
        const maxChars = 200;

        // Note input handler
        noteInput.addEventListener("input", function() {
            let currentLength = noteInput.value.length;
            if (currentLength > maxChars) {
                noteInput.value = noteInput.value.substring(0, maxChars);
                currentLength = maxChars;
            }
            wordCount.textContent = `Số ký tự: ${currentLength} / ${maxChars}`;
        });

        // Initialize data
        allCharms = @Html.Raw(Json.Serialize(ViewBag.Charms));
        filteredCharms = [...allCharms];

        const availableCharmsDiv = document.getElementById('availableCharms');
        const braceletDiv = document.getElementById('bracelet');
        const slots = [];
        const totalSlots = 8;

        // Debounce function for search
        // function debounce(func, wait) {
        //     let timeout;
        //     return function executedFunction(...args) {
        //         const later = () => {
        //             clearTimeout(timeout);
        //             func(...args);
        //         };
        //         clearTimeout(timeout);
        //         timeout = setTimeout(later, wait);
        //     };
        // }

        // Search functionality
        // const debouncedSearch = debounce((query) => {
        //     const searchTerm = query.toLowerCase().trim();
        //     if (searchTerm === '') {
        //         filteredCharms = [...allCharms];
        //     } else {
        //         filteredCharms = allCharms.filter(charm =>
        //             charm.name.toLowerCase().includes(searchTerm) ||
        //             (charm.category && charm.category.toLowerCase().includes(searchTerm))
        //         );
        //     }
        //     currentPage = 0;
        //     renderAvailableCharms(true);
        // }, 300);

        // searchInput.addEventListener('input', (e) => {
        //     debouncedSearch(e.target.value);
        // });

        // Optimized image loading with preloading
        function createOptimizedImage(charm) {
            const img = document.createElement('img');

            // Set dimensions immediately to prevent layout shift
            img.style.width = '100%';
            img.style.height = '80px';
            img.style.objectFit = 'cover';
            img.style.backgroundColor = '#f0f0f0';

            // Add loading='lazy' for native lazy loading
            img.loading = 'lazy';
            img.decoding = 'async';

            if (imageCache.has(charm.imageUrl)) {
                img.src = imageCache.get(charm.imageUrl);
                img.style.opacity = '1';
            } else {
                // Start loading immediately but show placeholder
                img.style.opacity = '0.3';
                img.style.background = 'linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%)';

                img.onload = () => {
                    imageCache.set(charm.imageUrl, charm.imageUrl);
                    img.style.opacity = '1';
                    img.style.background = 'none';
                };

                img.onerror = function() {
                    this.style.display = 'none';
                    const parent = this.parentNode;
                    if (parent) {
                        parent.style.background = 'linear-gradient(45deg, #667eea, #764ba2)';
                        parent.style.color = 'white';
                        parent.style.display = 'flex';
                        parent.style.alignItems = 'center';
                        parent.style.justifyContent = 'center';
                        parent.style.fontSize = '12px';
                        parent.textContent = charm.name;
                    }
                };

                // Load image immediately instead of waiting for intersection
                img.src = charm.imageUrl;
            }

            img.alt = charm.name;
            return img;
        }

        // Simplified charm item creation
        function createCharmItem(charm) {
            const wrapper = document.createElement('div');
            wrapper.className = 'charm-wrapper';

            const div = document.createElement('div');
            div.className = 'charm-item';
            div.dataset.id = charm.charmId;

            const img = createOptimizedImage(charm);
            div.appendChild(img);

            const price = document.createElement('div');
            price.className = 'charm-price';
            price.textContent = charm.price ? `${charm.price.toLocaleString('vi-VN')}đ` : 'Liên hệ';

            wrapper.appendChild(div);
            wrapper.appendChild(price);

            return wrapper;
        }

        // Virtual scrolling implementation
        function renderAvailableCharms(reset = false) {
            if (reset) {
                availableCharmsDiv.innerHTML = '';
                visibleCharms = [];
                currentPage = 0;
            }

            const usedIds = new Set();
            slots.forEach(slot => {
                if (slot.children.length > 0) {
                    const id = slot.children[0].dataset.id;
                    usedIds.add(id);
                }
            });

            const availableCharms = filteredCharms.filter(charm => !usedIds.has(charm.charmId));

            if (availableCharms.length === 0) {
                availableCharmsDiv.innerHTML = '<div class="empty-message">🎉 Không còn charm nào để chọn</div>';
                return;
            }

            // Load more items
            const startIndex = currentPage * itemsPerPage;
            const endIndex = Math.min(startIndex + itemsPerPage, availableCharms.length);
            const itemsToRender = availableCharms.slice(startIndex, endIndex);

            // Use DocumentFragment for better performance
            const fragment = document.createDocumentFragment();

            itemsToRender.forEach(charm => {
                const charmItem = createCharmItem(charm);
                fragment.appendChild(charmItem);
                visibleCharms.push(charm);
            });

            availableCharmsDiv.appendChild(fragment);
            currentPage++;

            // Show load more button if there are more items
            if (endIndex < availableCharms.length) {
                const loadMoreBtn = document.createElement('button');
                loadMoreBtn.textContent = `Xem thêm (${availableCharms.length - endIndex} charm)`;
                loadMoreBtn.className = 'load-more-btn';
                loadMoreBtn.style.cssText = 'width: 100%; padding: 10px; margin: 10px 0; background: #f8f9fa; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;';
                loadMoreBtn.onclick = () => {
                    loadMoreBtn.remove();
                    renderAvailableCharms(false);
                };
                availableCharmsDiv.appendChild(loadMoreBtn);
            }
        }

        // Infinite scroll
        charmContainer.addEventListener('scroll', () => {
            if (charmContainer.scrollTop + charmContainer.clientHeight >= charmContainer.scrollHeight - 100) {
                if (!isLoading && currentPage * itemsPerPage < filteredCharms.length) {
                    isLoading = true;
                    setTimeout(() => {
                        renderAvailableCharms(false);
                        isLoading = false;
                    }, 100);
                }
            }
        });

        // Rest of your existing functions (createSlots, removeCharmFromSlot, etc.)
        function removeCharmFromSlot(charm) {
            const parentSlot = charm.parentNode;
            if (parentSlot && parentSlot.classList.contains('slot')) {
                parentSlot.removeChild(charm);
                updateTotalPrice();
                renderAvailableCharms(true); // Reset and re-render
            }
        }

        function createSlots() {
            braceletDiv.innerHTML = '';
            slots.length = 0;
            updateTotalPrice();

            const rope = document.createElement('div');
            rope.className = 'bracelet-rope';
            braceletDiv.appendChild(rope);

            const radius = 160;
            const centerX = braceletDiv.clientWidth / 2;
            const centerY = braceletDiv.clientHeight / 2;

            for (let i = 0; i < totalSlots; i++) {
                const slot = document.createElement('div');
                slot.className = 'slot';
                slot.id = `slot-${i}`;
                slot.dataset.index = i;
                slot.textContent = `${i + 1}`;

                const angle = (i * 2 * Math.PI) / totalSlots - Math.PI / 2;
                const x = centerX + radius * Math.cos(angle) - 35;
                const y = centerY + radius * Math.sin(angle) - 35;

                slot.style.left = `${x}px`;
                slot.style.top = `${y}px`;

                braceletDiv.appendChild(slot);
                slots.push(slot);

                new Sortable(slot, {
                    group: {
                        name: 'charms',
                        put: function(to, from) {
                            return to.el.children.length === 0 || from.el === to.el;
                        }
                    },
                    animation: 300,
                    ghostClass: 'sortable-ghost',
                    chosenClass: 'sortable-chosen',
                    onAdd: function(evt) {
                        const slotEl = evt.to;
                        if (slotEl.children.length > 1) {
                            for (let i = 0; i < slotEl.children.length - 1; i++) {
                                slotEl.removeChild(slotEl.children[i]);
                            }
                        }

                        if (evt.from.id === 'availableCharms' || evt.from.closest('#availableCharms')) {
                            const charmItem = evt.item;
                            const id = charmItem.dataset.id || charmItem.querySelector('.charm-item')?.dataset.id;
                            const charm = allCharms.find(c => c.charmId === id);

                            if (charm) {
                                const price = charmItem.querySelector('.charm-price');
                                if (price) {
                                    charmItem.removeChild(price);
                                }

                                const oldButton = charmItem.querySelector('button');
                                if (oldButton) {
                                    charmItem.removeChild(oldButton);
                                }

                                const btnRemove = document.createElement('button');
                                btnRemove.textContent = '×';
                                btnRemove.onclick = function(e) {
                                    e.stopPropagation();
                                    e.preventDefault();
                                    removeCharmFromSlot(this.parentNode);
                                };
                                charmItem.appendChild(btnRemove);

                                charmItem.classList.remove('charm-item');
                                charmItem.classList.add('ring-item');

                                const image = charmItem.querySelector('img');
                                if (image) {
                                    image.style.maxWidth = '100%';
                                }
                            }
                        }
                        updateTotalPrice();
                        renderAvailableCharms(true);
                    },
                    onUpdate: function(evt) {
                        const charmItem = evt.item;
                        const oldButton = charmItem.querySelector('button');
                        if (oldButton) {
                            charmItem.removeChild(oldButton);
                        }

                        const btnRemove = document.createElement('button');
                        btnRemove.textContent = '×';
                        btnRemove.onclick = function(e) {
                            e.stopPropagation();
                            e.preventDefault();
                            removeCharmFromSlot(this.parentNode);
                        };
                        charmItem.appendChild(btnRemove);
                        updateTotalPrice();
                    }
                });
            }
        }

        function updateTotalPrice() {
            let totalPrice = 15000;
            for (let i = 0; i < slots.length; i++) {
                const slot = slots[i];
                if (slot.children.length > 0) {
                    const charmId = slot.children[0].dataset.id;
                    const charm = allCharms.find(c => c.charmId === charmId);
                    if (charm && charm.price) {
                        totalPrice += charm.price;
                    }
                }
            }
            const priceDisplay = document.getElementById('totalPriceDisplay');
            priceDisplay.textContent = `Tổng giá vòng tay: ${totalPrice.toLocaleString('vi-VN')}đ`;
        }

        new Sortable(availableCharmsDiv, {
            group: {
                name: 'charms',
                pull: 'clone',
                put: false
            },
            sort: false,
            animation: 300,
            ghostClass: 'sortable-ghost',
            chosenClass: 'sortable-chosen',
            onStart: function(evt) {
                const wrapper = evt.item;
                const charmItem = wrapper.querySelector('.charm-item');
                if (charmItem) {
                    evt.item.dataset.id = charmItem.dataset.id;
                }
            }
        });

        // Submit button handler (keeping your existing logic)
        document.getElementById('submitBtn').onclick = () => {
            const selectedIds = [];
            for (let i = 0; i < slots.length; i++) {
                const slot = slots[i];
                if (slot.children.length > 0) {
                    selectedIds.push(slot.children[0].dataset.id);
                } else {
                    selectedIds.push("");
                }
            }

            const note = document.getElementById('noteInput').value.trim();
            const filledSlots = selectedIds.filter(id => id !== "").length;

            if (filledSlots === 0) {
                alert('🎯 Vui lòng đặt ít nhất 1 charm vào vòng tay trước khi gửi!');
                return;
            } else {
                Swal.fire({
                    title: 'Xác nhận thêm vào giỏ',
                    text: 'Bạn có muốn thêm vòng tay này vào giỏ hàng không?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Thêm vào giỏ',
                    cancelButtonText: 'Hủy',
                    customClass: {
                        confirmButton: 'swal2-confirm',
                        cancelButton: 'swal2-cancel'
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        console.log('Đang gửi vòng tay:', { note, selectedIds });
                        $.ajax({
                            url: '/Custom/AddBraceletToCart',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({
                                note: note,
                                charmIds: selectedIds
                            }),
                            headers: {
                                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                            },
                            success: function (response) {
                                console.log('AJAX success:', response);
                                if (response.success) {
                                    Swal.fire({
                                        title: 'Thành công',
                                        text: 'Sản phẩm đã được thêm vào giỏ hàng.',
                                        icon: 'success',
                                        confirmButtonText: 'OK'
                                    }).then(() => {
                                        if (typeof updateCartCount === 'function') {
                                            updateCartCount();
                                        }
                                        window.location.href = 'https://localhost:7290/Cart/CartDetail';
                                    });
                                } else {
                                    Swal.fire({
                                        title: 'Lỗi',
                                        text: response.message || 'Không thể thêm vào giỏ hàng.',
                                        icon: 'error',
                                        confirmButtonText: 'Đóng'
                                    });
                                }
                            },
                            error: function (xhr, status, error) {
                                console.error('AJAX error:', status, error, xhr.responseText);
                                Swal.fire({
                                    title: 'Lỗi',
                                    text: 'Có lỗi xảy ra khi thêm sản phẩm vào giỏ hàng.',
                                    icon: 'error',
                                    confirmButtonText: 'Đóng'
                                });
                            }
                        });
                    }
                });
            }
        };

        // Initialize everything
        createSlots();
        renderAvailableCharms(true);
    </script>
</body>
</html>