@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
	<title>Vòng tay với vị trí cố định</title>
	<link href="~/css/sortable.css" rel="stylesheet" />
</head>
<body>
    <div class="container">
        <div class="charm-list">
            <h3>✨ Danh sách Charm</h3>
            <div id="availableCharms"></div>
        </div>

        <div class="ring">
            <h3>💍 Vòng tay (Tối thiểu 1 charm)</h3>
            <div id="bracelet"></div>
            <button id="submitBtn">🚀 Gửi vòng tay</button>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script>
        const charms = [
            { id: 1, name: "1", img: "https://dytbw3ui6vsu6.cloudfront.net/media/catalog/product/resize/700x700/h/n/hna_b22lm06_11_1_1.webp"},
            { id: 2, name: "2", img: "https://dytbw3ui6vsu6.cloudfront.net/media/catalog/product/resize/700x700/h/n/hna_b22lm06_11_1_1.webp" },
            { id: 3, name: "3", img: "https://dytbw3ui6vsu6.cloudfront.net/media/catalog/product/resize/700x700/h/n/hna_b22lm06_11_1_1.webp" },
            { id: 4, name: "4", img: "https://dytbw3ui6vsu6.cloudfront.net/media/catalog/product/resize/700x700/h/n/hna_b22lm06_11_1_1.webp" },
            { id: 5, name: "5", img: "https://dytbw3ui6vsu6.cloudfront.net/media/catalog/product/resize/700x700/h/n/hna_b22lm06_11_1_1.webp" },
            { id: 6, name: "6", img: "https://dytbw3ui6vsu6.cloudfront.net/media/catalog/product/resize/700x700/h/n/hna_b22lm06_11_1_1.webp" },
            { id: 7, name: "7", img: "https://dytbw3ui6vsu6.cloudfront.net/media/catalog/product/resize/700x700/h/n/hna_b22lm06_11_1_1.webp" },
            { id: 8, name: "8", img: "https://dytbw3ui6vsu6.cloudfront.net/media/catalog/product/resize/700x700/h/n/hna_b22lm06_11_1_1.webp" },
            { id: 9, name: "9", img: "https://dytbw3ui6vsu6.cloudfront.net/media/catalog/product/resize/700x700/h/n/hna_b22lm06_11_1_1.webp" },
            { id: 10, name: "10", img: "https://dytbw3ui6vsu6.cloudfront.net/media/catalog/product/resize/700x700/h/n/hna_b22lm06_11_1_1.webp" },
            { id: 11, name: "11", img: "https://dytbw3ui6vsu6.cloudfront.net/media/catalog/product/resize/700x700/h/n/hna_b22lm06_11_1_1.webp"},
            { id: 12, name: "12", img: "https://dytbw3ui6vsu6.cloudfront.net/media/catalog/product/resize/700x700/h/n/hna_b22lm06_11_1_1.webp" },
            { id: 13, name: "13", img: "https://dytbw3ui6vsu6.cloudfront.net/media/catalog/product/resize/700x700/h/n/hna_b22lm06_11_1_1.webp" },
            { id: 14, name: "14", img: "https://dytbw3ui6vsu6.cloudfront.net/media/catalog/product/resize/700x700/h/n/hna_b22lm06_11_1_1.webp" },
            { id: 15, name: "15", img: "https://dytbw3ui6vsu6.cloudfront.net/media/catalog/product/resize/700x700/h/n/hna_b22lm06_11_1_1.webp" }
        ];

        const availableCharmsDiv = document.getElementById('availableCharms');
        const braceletDiv = document.getElementById('bracelet');
        const slots = [];
        const totalSlots = 8;

        function removeCharmFromSlot(charm) {
            const parentSlot = charm.parentNode;
            if (parentSlot && parentSlot.classList.contains('slot')) {
                parentSlot.removeChild(charm);
                renderAvailableCharms();
            }
        }

        function createSlots() {
            braceletDiv.innerHTML = '';
            slots.length = 0;

            // Tạo sợi dây ở giữa
            const rope = document.createElement('div');
            rope.className = 'bracelet-rope';
            braceletDiv.appendChild(rope);

            const radius = 160;
            const centerX = braceletDiv.clientWidth / 2;
            const centerY = braceletDiv.clientHeight / 2;

            // Tạo vòng tròn hoàn chỉnh với 8 vị trí
            for (let i = 0; i < totalSlots; i++) {
                const slot = document.createElement('div');
                slot.className = 'slot';
                slot.id = `slot-${i}`;
                slot.dataset.index = i;
                slot.textContent = `${i + 1}`;

                // Tính góc cho vòng tròn hoàn chỉnh (bắt đầu từ trên cùng)
                const angle = (i * 2 * Math.PI) / totalSlots - Math.PI / 2;
                const x = centerX + radius * Math.cos(angle) - 35;
                const y = centerY + radius * Math.sin(angle) - 35;

                slot.style.left = `${x}px`;
                slot.style.top = `${y}px`;

                braceletDiv.appendChild(slot);
                slots.push(slot);

                new Sortable(slot, {
                    group: {
                        name: 'charms',
                        put: function(to, from) {
                            return to.el.children.length === 0 || from.el === to.el;
                        }
                    },
                    animation: 300,
                    ghostClass: 'sortable-ghost',
                    chosenClass: 'sortable-chosen',
                    onAdd: function(evt) {
                        const slotEl = evt.to;
                        if (slotEl.children.length > 1) {
                            for (let i = 0; i < slotEl.children.length - 1; i++) {
                                slotEl.removeChild(slotEl.children[i]);
                            }
                        }

                        if (evt.from.id === 'availableCharms') {
                            const charmItem = evt.item;
                            const id = +charmItem.dataset.id;
                            const charm = charms.find(c => c.id === id);

                            if (charm) {
                                const oldButton = charmItem.querySelector('button');
                                if (oldButton) {
                                    charmItem.removeChild(oldButton);
                                }

                                const btnRemove = document.createElement('button');
                                btnRemove.textContent = '×';
                                btnRemove.onclick = function(e) {
                                    e.stopPropagation();
                                    e.preventDefault();
                                    removeCharmFromSlot(this.parentNode);
                                };
                                charmItem.appendChild(btnRemove);

                                charmItem.classList.remove('charm-item');
                                charmItem.classList.add('ring-item');
                            }
                        }

                        renderAvailableCharms();
                    },
                    onUpdate: function(evt) {
                        const charmItem = evt.item;

                        const oldButton = charmItem.querySelector('button');
                        if (oldButton) {
                            charmItem.removeChild(oldButton);
                        }

                        const btnRemove = document.createElement('button');
                        btnRemove.textContent = '×';
                        btnRemove.onclick = function(e) {
                            e.stopPropagation();
                            e.preventDefault();
                            removeCharmFromSlot(this.parentNode);
                        };
                        charmItem.appendChild(btnRemove);
                    }
                });
            }
        }

        function createCharmItem(charm) {
            const div = document.createElement('div');
            div.className = 'charm-item';
            div.dataset.id = charm.id;

            const img = document.createElement('img');
            img.src = charm.img;
            img.alt = charm.name;
            img.onerror = function() {
                this.style.display = 'none';
                div.style.background = 'linear-gradient(45deg, #667eea, #764ba2)';
                div.style.color = 'white';
                div.style.display = 'flex';
                div.style.alignItems = 'center';
                div.style.justifyContent = 'center';
                div.textContent = charm.name;
            };

            div.appendChild(img);
            return div;
        }

        function renderAvailableCharms() {
            availableCharmsDiv.innerHTML = '';

            const usedIds = new Set();
            slots.forEach(slot => {
                if (slot.children.length > 0) {
                    const id = +slot.children[0].dataset.id;
                    usedIds.add(id);
                }
            });

            const availableCharms = charms.filter(charm => !usedIds.has(charm.id));

            if (availableCharms.length === 0) {
                availableCharmsDiv.innerHTML = '<div class="empty-message">🎉 Không còn charm nào để chọn</div>';
            } else {
                availableCharms.forEach(charm => {
                    const charmItem = createCharmItem(charm);
                    availableCharmsDiv.appendChild(charmItem);
                });
            }
        }

        new Sortable(availableCharmsDiv, {
            group: {
                name: 'charms',
                pull: 'clone',
                put: false
            },
            sort: false,
            animation: 300,
            ghostClass: 'sortable-ghost',
            chosenClass: 'sortable-chosen'
        });

        document.getElementById('submitBtn').onclick = () => {
            const selectedIds = [];

            // Duyệt qua tất cả các slot theo thứ tự
            for (let i = 0; i < slots.length; i++) {
                const slot = slots[i];
                if (slot.children.length > 0) {
                    // Có charm trong slot này
                    selectedIds.push(+slot.children[0].dataset.id);
                } else {
                    // Slot trống, gán id = 0
                    selectedIds.push(0);
                }
            }

            // Đếm số charm đã được đặt
            const filledSlots = selectedIds.filter(id => id !== 0).length;

            // Kiểm tra tối thiểu 1 charm
            if (filledSlots === 0) {
                alert('🎯 Vui lòng đặt ít nhất 1 charm vào vòng tay trước khi gửi!');
                return;
            }

            alert(`🎉 Vòng tay của bạn có ${filledSlots} charm!\nVị trí charm: [${selectedIds.join(', ')}]\n(0 = vị trí trống)`);
        };

        createSlots();
        renderAvailableCharms();
    </script>
</body>
</html>